<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-07-11T22:53:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The Final Stretch</title>
    <link rel="alternate" href="http://blog.url.com/2015/07/12/The-Final-Stretch/"/>
    <id>http://blog.url.com/2015/07/12/The-Final-Stretch/</id>
    <published>2015-07-11T22:53:00-05:00</published>
    <updated>2015-07-14T21:17:08-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve hit an important milestone of my Design Residency here at 8th Light. I am in my last month of my apprenticeship which means that I will spend the next month trying to show what i’ve learned in the last 5 months and prove that I have what it takes to earn a position as a Design Craftsperson here at 8th Light. It is also an opportunity for me to see what it is like to work with other Craftsman, explore some of our client projects, and to gauge whether it’s truly the right fit.&lt;/p&gt;
&lt;p&gt;For the next two weeks I will go on a “Pairing Tour” which means that I will be pairing with a new person every day. I’m really excited to continue to work alongside others as my last month of client work with Emmanuel and Geoff has been such a great experience.&lt;/p&gt;

&lt;p&gt;I rolled an amazing group of people for my tour  and review board so I know it’ll be a fun couple of weeks and i’m no doubt going to learn a great deal from each person. I’ll use this fuel the energy I know i’ll need to complete two weeks of challenges following my tour and to prepare for my speech where I’ll most likely turn red thanks to my Irish side.&lt;/p&gt;

&lt;h5 id="some-goals-i-have-for-my-tour"&gt;Some goals I have for my tour:&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Try to get better sleep than I have during my apprenticeship&lt;/li&gt;
  &lt;li&gt;Ask tons of questions&lt;/li&gt;
  &lt;li&gt;Be a good pair who’s engaged in the work&lt;/li&gt;
  &lt;li&gt;Stay positive even if I feel out of my element&lt;/li&gt;
  &lt;li&gt;Blog about each day of my tour&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id="my-schedule"&gt;My Schedule:&lt;/h5&gt;

&lt;p&gt;&lt;img alt="Pairing Calendar" src="/images/Tour_calendar.svg" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“You have to fight to reach your dream. You have to sacrifice and work hard for it.
- Lionel Messi”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Helpful Notes</title>
    <link rel="alternate" href="http://blog.url.com/2015/06/02/Helpful-Notes/"/>
    <id>http://blog.url.com/2015/06/02/Helpful-Notes/</id>
    <published>2015-06-01T22:53:00-05:00</published>
    <updated>2015-06-19T02:07:29-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Before learning anything about programming I used to thing that programmers were nerdy magical beings who had a massive file system of programming tricks up their sleeves. I soon figured out that programmers are master-expert googlers and most of the time they know how to solve a problem because they were once stuck on it themselves. Over the past year i've become more nerdy, and hopefully awesome? Here's a list I keep in my notes section of problems I have run into:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;NOTES&lt;/p&gt;

&lt;h3 id="when-you-need-to-take-a-screen-shot"&gt;WHEN YOU NEED TO TAKE A SCREEN SHOT&lt;/h3&gt;
&lt;p&gt;Command +shift +4 = screen shot selection&lt;/p&gt;

&lt;h3 id="when-youre-stuck-in-your-command-line"&gt;WHEN YOU'RE STUCK IN YOUR COMMAND LINE&lt;/h3&gt;
&lt;p&gt;control c - quits a process on your command line&lt;/p&gt;

&lt;h3 id="when-you-push-something-you-didnt-mean-to"&gt;WHEN YOU PUSH SOMETHING YOU DIDN'T MEAN TO&lt;/h3&gt;

&lt;p&gt;git reset HEAD~ 
re-add and commit the files you wanted
git push –force&lt;/p&gt;

&lt;h3 id="when-you-need-to-kill-your-server"&gt;WHEN YOU NEED TO KILL YOUR SERVER&lt;/h3&gt;
&lt;p&gt;Try&lt;/p&gt;

&lt;p&gt;lsof -i:4567&lt;/p&gt;

&lt;p&gt;And see if there are any processes running. If so, you'll be provided the process id and you can do:&lt;/p&gt;

&lt;p&gt;kill -9 &lt;pid here=""&gt;&lt;/pid&gt;&lt;/p&gt;

&lt;h3 id="when-your-ruby-version-changes"&gt;WHEN YOUR RUBY VERSION CHANGES::::&lt;/h3&gt;

&lt;p&gt;$ rvm use 2.x.x&lt;/p&gt;

&lt;p&gt;$ rvm –default use 2.x.x&lt;/p&gt;

&lt;h3 id="when-you-need-to-create-a-new-branch"&gt;WHEN YOU NEED TO CREATE A NEW BRANCH&lt;/h3&gt;
&lt;p&gt;example:&lt;/p&gt;

&lt;p&gt;[master][~projects/vision] git checkout -b create-branch-name-here&lt;/p&gt;

&lt;p&gt;[cohort-pages] [~projects/vision] git branch&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cohort-pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;master&lt;/p&gt;

&lt;p&gt;if you want to get back to master…&lt;/p&gt;

&lt;p&gt;git checkout master&lt;/p&gt;

&lt;h3 id="when-you-need-to-pull-down-a-branch"&gt;WHEN YOU NEED TO PULL DOWN A BRANCH&lt;/h3&gt;

&lt;p&gt;Pull down a branch&lt;/p&gt;

&lt;p&gt;git br -r&lt;/p&gt;

&lt;p&gt;——shows all branches&lt;/p&gt;

&lt;p&gt;git fetch &lt;/p&gt;

&lt;p&gt;git checkout (whatever branch you want)&lt;/p&gt;

&lt;h3 id="when-you-need-to-create-a-pull-request"&gt;WHEN YOU NEED TO CREATE A PULL-REQUEST&lt;/h3&gt;

&lt;p&gt;cool resource: http://stackoverflow.com/questions/16955980/git-merge-master-into-feature-branch&lt;/p&gt;

&lt;p&gt;git branch (check out the branch you’re on)&lt;/p&gt;

&lt;p&gt;git status to check what you have to commit&lt;/p&gt;

&lt;p&gt;git add .&lt;/p&gt;

&lt;p&gt;git commit -m “ “&lt;/p&gt;

&lt;p&gt;git push origin cohort-pages &lt;/p&gt;

&lt;p&gt;git checkout master&lt;/p&gt;

&lt;p&gt;git pull&lt;/p&gt;

&lt;p&gt;git checkout (page you want to be on example: cohort-pages)&lt;/p&gt;

&lt;p&gt;git rebase master &amp;lt;——may need to rebase earlier???&lt;/p&gt;

&lt;h3 id="when-you-want-to-save-your-local-changes-before-pulling"&gt;WHEN YOU WANT TO SAVE YOUR LOCAL CHANGES (before pulling)&lt;/h3&gt;

&lt;p&gt;git stash; &lt;/p&gt;

&lt;p&gt;git pull; &lt;/p&gt;

&lt;p&gt;git stash pop&lt;/p&gt;

&lt;h3 id="when-youre-having-a-migration-error"&gt;WHEN YOU'RE HAVING A MIGRATION ERROR:&lt;/h3&gt;
&lt;p&gt;rake db:reset&lt;/p&gt;

&lt;h3 id="when-youre-not-getting-data-from-the-database"&gt;WHEN YOU'RE NOT GETTING DATA FROM THE DATABASE:&lt;/h3&gt;
&lt;p&gt;rake db:seed&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It's funny looking back at this list and the issues i've run into… Screen shot? O, Erica you silly girl. It's also great to go down the list and remember where I was in my apprenticeship and where I am now. It'll be interesting to see what my next adventures will be =)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cesars Resources</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/20/Cesars-Resources/"/>
    <id>http://blog.url.com/2015/05/20/Cesars-Resources/</id>
    <published>2015-05-19T22:53:00-05:00</published>
    <updated>2015-06-19T00:44:14-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For the majority of my apprenticeship I have been working on my own. However, this week I was able to get some good pairing in with another designer - Cesar Figueroa. One of the things I loved about working with Cesar aside from his great taste in music is his willingness to share all of the cool tools he has gathered over time. Here are some of the cool resources that I took note of:&lt;/p&gt;
&lt;h3 id="caniusecom"&gt;caniuse.com&lt;/h3&gt;

&lt;p&gt;"Can I use" provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Can I Use" src="/images/blog/resources/can-i-use.png" /&gt;&lt;/p&gt;

&lt;h3 id="tinypngcom"&gt;tinypng.com&lt;/h3&gt;

&lt;p&gt;“TinyPNG uses smart lossy compression techniques to reduce the file size of your PNG files.”&lt;/p&gt;

&lt;p&gt;&lt;img alt="Tiny PNG" src="/images/blog/resources/tinypng.png" /&gt;&lt;/p&gt;

&lt;h3 id="chromecache"&gt;chrome://cache/&lt;/h3&gt;

&lt;p&gt;The server will tell the browser whether it should cache a page and for long. This is pretty usefl if you need to find a cached version of your website.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Chrome cache" src="/images/blog/resources/chrome.png" /&gt;&lt;/p&gt;

&lt;h3 id="destroyallsoftwarecom"&gt;destroyallsoftware.com&lt;/h3&gt;

&lt;p&gt;Destroy All Software screencasts are short: 10 to 15 minutes, but dense with information.&lt;/p&gt;

&lt;p&gt;&lt;img alt="destroyallsoftware" src="/images/blog/resources/death-to-software.png" /&gt;&lt;/p&gt;

&lt;h3 id="thegreatdiscontentcom"&gt;thegreatdiscontent.com&lt;/h3&gt;

&lt;p&gt;The Great Discontent (TGD) is a triannual print publication and online magazine featuring candid interviews with those who create. Focusing on beginnings, creativity, and risk, TGD provides a memorable look into the lives of its subjects via long-form interviews, short features, and film-based projects.&lt;/p&gt;

&lt;p&gt;&lt;img alt="The Great Discontent" src="/images/blog/resources/great-discontent.png" /&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Limiting repetiton in your html</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/14/Limiting-repetition-in-your-html/"/>
    <id>http://blog.url.com/2015/05/14/Limiting-repetition-in-your-html/</id>
    <published>2015-05-13T22:53:00-05:00</published>
    <updated>2015-05-18T00:23:12-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;While working on a section of an internal project there was something that was bothering me about the way that I structured everything with static pages. Essentially the section contained an index page which linked to four individual view/team pages. Pretty simple. &lt;/p&gt;
&lt;p&gt;&lt;img alt="diagram_1" src="/images/blog/yaml/diagram_1.svg" /&gt;&lt;/p&gt;

&lt;p&gt;The team pages were structured the same but contained content particular to that team such as its own about content, members, and leader info. The best part about this monster I created was that it would breed like bunnies…&lt;/p&gt;

&lt;p&gt;&lt;img alt="baby_bunnies" src="/images/blog/yaml/baby_bunnies.svg" /&gt;&lt;/p&gt;

&lt;p&gt;As more team pages were added that same html markup would have to be copied. Even more fun – adding and updating content would not be pretty and I could create more enemies than Joffrey from the Game of Thrones.&lt;/p&gt;

&lt;p&gt;I decided to leave the darkside and find a better solution.&lt;/p&gt;

&lt;h2 id="one-view-to-the-rescue"&gt;One view to the rescue&lt;/h2&gt;

&lt;p&gt;The idea behind this approach is to solve these problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Each team is it’s own “view” = ton’s of repetition&lt;/li&gt;
  &lt;li&gt;In order to edit data pertaining to a team you currently have to update it in the index and its individual team page&lt;/li&gt;
  &lt;li&gt;The static html files are tedious to enter data into&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Create easy to edit data files that feed into one view. It would work like so:&lt;/p&gt;

&lt;p&gt;&lt;img alt="diagram_2" src="/images/blog/yaml/diagram_2.svg" /&gt;&lt;/p&gt;

&lt;h2 id="creating-the-data-files"&gt;Creating the "data files"&lt;/h2&gt;

&lt;p&gt;As I stated before the data for each of the team pages was pretty similar. So having data files that could feed into one view which would generate new team pages made sense. &lt;/p&gt;

&lt;p&gt;I chose to research and use my new friend, YAML aka “YAML Ain't Markup Language" for these data files. What is great about YAML is that it was designed to be easily mapped to data types common to most high-level languages: lists, associative arrays, and scalar.&lt;/p&gt;

&lt;p&gt;Here is an example of a YAML data file that would feed into the view:&lt;/p&gt;

&lt;script src="https://gist.github.com/Sneakingrocky/c2e56783fc953ea2c7fd.js"&gt;&lt;/script&gt;

&lt;p&gt;This data creates generates a giant hash of keys and values like so:&lt;/p&gt;

&lt;script src="https://gist.github.com/Sneakingrocky/115e11b03387de806af8.js"&gt;&lt;/script&gt;

&lt;p&gt;If you like dealing with hashes good for you. I'm a bigger fan of working with objects. Using Ruby you can create methods which turn these key &amp;amp; values into an object like so:&lt;/p&gt;

&lt;script src="https://gist.github.com/Sneakingrocky/967bf1974a2d958b0ca5.js"&gt;&lt;/script&gt;

&lt;p&gt;The new methods we created can now be used in our view using Embedded Ruby:&lt;/p&gt;

&lt;script src="https://gist.github.com/Sneakingrocky/65ce56bee20f12a3b8c6.js"&gt;&lt;/script&gt;

&lt;h2 id="everything-is-so-much-cleaner"&gt;Everything is so much cleaner!&lt;/h2&gt;

&lt;p&gt;Using tools such as YAML, Ruby, and Embedded Ruby allowed me to clean up the structure of my project. With a singular view for team pages the duplication work that someone would have to do if they were somehow assigned to add 100 new teams is now gone. Imagine manually creating 100 static html pages and then having to apply future changes to each static page…yuck.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>I don't have to choose</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/13/I-don't-have-to-choose/"/>
    <id>http://blog.url.com/2015/05/13/I-don't-have-to-choose/</id>
    <published>2015-05-12T22:53:00-05:00</published>
    <updated>2015-05-13T14:07:03-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Last October while in the last month of my student software apprenticeship I really struggled with the decision of whether to continue to learn software development or to jump back into my designer shoes. I enjoyed the complex problems of programming but really missed the design side of problem solving. And even though I have always believed that one doesn’t have to choose between design and development I truly felt that I had to make a choice. And I did. Because to be honest - as a beginner of anything you have to stay focused on the thing you want to perfect. If you’re jumping around too much too early on you’re going to know a lot of things but you’ll never be a master at anything.&lt;/p&gt;
&lt;p&gt;So I chose design and starting over from square one. It wasn’t easy. And truthfully I was burnt out from living and breathing software for four months.  But I knew what I wanted, and I was ready to work for it.&lt;/p&gt;

&lt;p&gt;Since being accepted as a design resident I have tried to implement some of the principles that I learned while I was a software student. Trying to get something to work, be visually appealing, responsive, and look clean under the hood hasn’t been an easy task. I still have a lot of work to do because essentially every problem i’m tackling is something that i’m tackling for the very first time. That doesn’t bother me so much. Maybe the thing that bothers me the most is continually being road blocked by something that is “developer territory”. It seems acceptable around here for a designer to wait for that roadblock to be cleared by a developer. I don’t want to be road blocked. I don’t want to accept that something is as good as it can get because I don’t know the solution right then or am not required to know the solution. &lt;/p&gt;

&lt;p&gt;I think i’m at the point where I can start to join my passion for both design and development without getting too overwhelmed. I’m excited!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;"You always have two choices: your commitment versus your fear." — Sammy Davis, Jr.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>CSS Architecture</title>
    <link rel="alternate" href="http://blog.url.com/2015/04/24/CSS-Architecture/"/>
    <id>http://blog.url.com/2015/04/24/CSS-Architecture/</id>
    <published>2015-04-23T22:53:00-05:00</published>
    <updated>2015-06-19T01:42:31-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When I was first learning to program in Ruby I remember being so excited to have a working program. I was extremely nervous to show my work to my mentor. And as we went through my code she was very patient and told me that she could tell I worked hard on it. It meant so much - and honestly was great fuel to keep me excited about programming. &lt;/p&gt;
&lt;p&gt;Fast forward to the last few months of my student software apprenticeship and I realized just how terrible my code was. I had no regard for clean or structured code - I was a beginner and I needed to know how to make things work above all. &lt;/p&gt;

&lt;p&gt;I can see this same pattern in my Design Apprenticeship but perhaps the rules for the design and structure for setting up your project files and CSS is less clear and more opinionated than than it seemed to me when dealing with backend code. It just seems like everyone is trying to find a way to solve CSS architecture - but no one has found a solution to win over the masses quite yet.&lt;/p&gt;

&lt;p&gt;In order to start forming my own ideas on CSS architecture my mentor had me research a few of the most popular ways to structure my code and files: OOCSS(Object Oriented CSS), BEM(Block, Element, Modifier), and SMACSS(Scalable and Modular Architecture for CSS).&lt;/p&gt;

&lt;h3 id="oocssobject-oriented-css"&gt;OOCSS(Object Oriented CSS)&lt;/h3&gt;

&lt;p&gt;Object oriented CSS reminds me a lot about of the philosophies I learned during my student software apprenticeship. The idea is the same - while coding it is important to write it in a way that is clean and reusable. The benefits of coding this way are having cleaner, smaller, and more maintainable stylesheets. &lt;/p&gt;

&lt;h3 id="bemblock-element-modifier"&gt;BEM(Block, Element, Modifier)&lt;/h3&gt;

&lt;p&gt;BEM was a really interesting one to research. It’s a bit ugly but it’s purpose is beautiful. It’s ultimately trying to solve the problem of CSS being unreadable and confusing to those who didn’t write it themselves. If we’re honest with ourselves, maybe the classes we wrote ourselves a few weeks ago don’t seem to make sense anymore. This problem was also present when I was learning Ruby —&amp;gt; Write methods that are more descriptive. In reference to CSS —&amp;gt; Write classes that are more descriptive.&lt;/p&gt;

&lt;p&gt;&lt;img alt="BEM" src="/images/bem.png" /&gt;&lt;/p&gt;

&lt;h3 id="smacssscalable-and-modular-architecture-for-css"&gt;SMACSS(Scalable and Modular Architecture for CSS)&lt;/h3&gt;

&lt;p&gt;SMACSS was a little confusing at first but broken down it is simply trying to find a universal way for everyone to structure their project folders. &lt;/p&gt;

&lt;p&gt;style.scss &lt;/p&gt;

&lt;p&gt;_base.scss &lt;/p&gt;

&lt;p&gt;_layout.scss &lt;/p&gt;

&lt;p&gt;_modules.scss &lt;/p&gt;

&lt;p&gt;_state.scss&lt;/p&gt;

&lt;p&gt;_theme.scss&lt;/p&gt;

&lt;p&gt;Personally, I think that the state and theme folders are not necessary all the time and I don’t think i’ll be adding them to my file structure. However the other folders will help my organization a lot:&lt;/p&gt;

&lt;p&gt;style.scss 
The master file that imports all of your other stylesheets&lt;/p&gt;

&lt;p&gt;_base.scss 
This is where all the base styles live; resets, element defaults, default font sizes, etc.&lt;/p&gt;

&lt;p&gt;_layout.scss 
In this section you specify all types of layout containers, such as header, footer, content, sidebar, etc. &lt;/p&gt;

&lt;p&gt;_modules.scss 
Every module should be completely independent of its context and should work within any layout container or other module.&lt;/p&gt;

</content>
  </entry>
</feed>
